#include <Adafruit_CircuitPlayground.h>
#include <AsyncDelay.h>

//#define TapSensitivity 70



AsyncDelay Adelaytime;
//the pin number for the buttons and slideswitch
const byte slideswitchpin = 7;
const byte rightbuttonpin = 5;
const byte leftbuttonpin = 4;

int moistvalue;
int difficultylevel = 0;
bool startvar = 0;

//------------------ISR affected variables----------------------
volatile bool Switchflag = 0;
volatile bool rightbuttonflag = false;
volatile bool leftbuttonflag = false;
volatile bool accelflag = 0;



//---------------
bool RightAns = 0;
bool WrongAns = 0;
int Score = 0;
int diffchange = 0;



//----------------sound variables from   https://github.com/ArminJo/Talkie/blob/master/src/Vocab_US_Large.cpp   &   https://github.com/ArminJo/Talkie/blob/master/src/Vocab_US_TI99.cpp ----------------------------------------------
extern const uint8_t sp4_RIGHT[] PROGMEM = {0xAA,0x90,0xD5,0xAD,0x55,0x9D,0xA9,0x56,0x94,0xD4,0x0A,0x97,0xAB,0x7A,0x39,0x9C,0xBB,0x44,0x5D,0xE8,0xFD,0x14,0x3D,0x53,0xF7,0xAD,0x09,0x5D,0xAB,0xD4,0xDD,0xAD,0x3A,0xCB,0x0B,0x2F,0xE9,0xBC,0xEA,0xA2,0xCF,0xBC,0x74,0xD5,0xAA,0xAB,0x1D,0x89,0xD2,0xC7,0xAB,0xAD,0x21,0xA9,0xD2,0x1F,0x8F,0xB1,0x5A,0xA7,0xA9,0x7A,0x54,0x8E,0xE1,0x12,0xBC,0xF2,0x65,0x38,0xBB,0x67,0x8A,0xEE,0x56,0x08,0x9C,0xA2,0x54,0x85,0x6A,0x00,0x80,0x03,0xA6,0x50,0x77,0xC0,0xF3,0x15,0x04,0xD8,0xCA,0xEC,0xFF,0x01};
extern const uint8_t sp4_LEFT[] PROGMEM = {0x6E,0x4C,0xB8,0x8B,0xB5,0xDA,0xA6,0x75,0x23,0xEA,0x24,0x4B,0x1B,0xD6,0x0D,0x69,0x02,0xBD,0x5D,0x59,0x36,0xA2,0x49,0xB4,0x76,0x65,0xDC,0x88,0xC7,0x31,0x96,0xAD,0xA1,0xF1,0x8A,0x30,0xD9,0xB2,0xBA,0x2E,0xDB,0xC2,0x74,0xCB,0x6A,0x9B,0x29,0x4D,0xB3,0x35,0xAB,0x6B,0xAE,0x25,0x2D,0x56,0xAF,0xB1,0xF8,0xD4,0xB2,0x9C,0x23,0x80,0x6A,0x52,0x05,0xD0,0x75,0x28,0x03,0xBA,0x29,0xE5,0x00,0x02,0xA7,0x28,0x55,0xA1,0x1A,0x00,0x0A,0x18,0xD2,0x8D,0x01,0x9B,0xAB,0x21,0x70,0x8A,0x52,0x15,0xAA,0xF1,0xFF};
extern const uint8_t sp2_DEVICE[] PROGMEM = {0x64,0x8E,0x38,0x3C,0x4B,0x62,0x8F,0x7D,0x89,0x14,0xD4,0xCC,0xB5,0x86,0x11,0x9A,0xD1,0xB5,0xCF,0x1C,0xDC,0xDC,0xA5,0x23,0xB5,0x3B,0xCB,0x73,0x9D,0x46,0x99,0x6D,0x59,0x35,0xE5,0xD9,0xF5,0x69,0xAA,0x1E,0xCB,0xE2,0xCD,0xB7,0xB9,0xDD,0x19,0xAA,0x2F,0xE9,0xD0,0xD5,0x7B,0x69,0x57,0xF3,0x49,0x1E,0xF1,0x28,0xDE,0x0C,0xB8,0x36,0x54,0x00,0xBF,0x55,0x6A,0x40,0x03,0x1A,0xE0,0x00,0x07,0x28,0xF0,0xFF};
extern const uint8_t sp4_CONTACT[] PROGMEM = {0x0E,0x28,0x79,0xC4,0x00,0x39,0x3B,0x8C,0x22,0xC7,0xF0,0x36,0xAB,0xB5,0x86,0xAC,0x27,0xBD,0x64,0xF3,0x1A,0x2B,0xDB,0x96,0xF6,0x2E,0xAB,0x2B,0xE6,0xCC,0xD3,0x16,0xAD,0xBA,0xD8,0x15,0x4F,0x5F,0xB4,0xAA,0x6A,0xC2,0x92,0xB2,0x6D,0x2B,0x9B,0x66,0x1B,0x2E,0x4D,0xA1,0xCA,0x92,0x3A,0xA9,0x55,0xB1,0x2E,0x0A,0x57,0xD7,0xB2,0x94,0x80,0xC9,0x8A,0x4A,0xD1,0x43,0xB1,0x52,0xD6,0x59,0x45,0xF1,0xA6,0x69,0x5D,0x79,0x55,0xD5,0xA7,0x96,0xE7,0xE2,0xD5,0x96,0x50,0x52,0x11,0x8B,0x57,0x53,0xB3,0x5B,0x69,0xCF,0x1E,0x75,0xAD,0x46,0x2D,0x5D,0x06,0x81,0x53,0x94,0xAA,0x50,0x0D,0x00,0x00,0x03,0x4C,0xA1,0x6E,0x80,0xE7,0x2B,0xFE,0x1F};
extern const uint8_t sp2_PRESS[] PROGMEM = {0x02,0x28,0x31,0x43,0x03,0x25,0xCB,0xBE,0xDC,0x5D,0xED,0x94,0x22,0x0E,0xCE,0x70,0xC9,0xBD,0xF2,0x9C,0xD5,0xBD,0x24,0xEF,0xC9,0xAB,0x77,0xF5,0x92,0x3E,0x27,0x6B,0xA1,0x25,0xD5,0x56,0xDF,0xEC,0x34,0x5D,0xA7,0x94,0xF9,0xEB,0x3B,0xEC,0x69,0xEE,0x75,0x15,0xC0,0x57,0xC1,0x02,0xF8,0x3D,0x5D,0x02,0x1A,0xD0,0x80,0x04,0x28,0x80,0x81,0xFF,0x07};
extern const uint8_t sp2_BUTTON[] PROGMEM = {0x10,0xA6,0x28,0xDD,0xCD,0x2D,0xD5,0x6A,0x8B,0xEE,0x6C,0xB1,0x4D,0xA7,0xAC,0x2E,0xA3,0x44,0x97,0xDC,0xA6,0xF5,0xCD,0x6B,0x34,0x46,0x13,0x32,0x89,0x50,0xEE,0x22,0xB2,0x01,0x20,0xA5,0xDD,0xA1,0x94,0xBB,0xB3,0xB6,0x0C,0x2F,0xA4,0xE6,0xF1,0xFA,0x96,0x8F,0x70,0x8F,0xC2,0x2A,0xE6,0x4A,0xDD,0xD3,0x2D,0x51,0x7A,0xDA,0xF3,0xAF,0x7B,0x47,0x63,0x51,0x73,0x67,0xE1,0x6B,0x46,0xDD,0x49,0xEB,0xFE,0x3F};

extern const uint8_t sp3_OVER[] PROGMEM = {0x63,0x6F,0xC4,0x7A,0x1D,0xB5,0xED,0x61,0x37,0xBB,0x6E,0x75,0x62,0xD9,0x2D,0xEC,0xBF,0x56,0xAD,0x09,0xBA,0x32,0x8C,0x13,0xC7,0xD6,0xED,0x4D,0x85,0x86,0x99,0xE3,0x3E,0xB7,0x29,0x86,0x90,0x2C,0x76,0xDB,0xE6,0x98,0x95,0xBB,0x38,0x4F,0x5B,0x72,0x29,0xB4,0x51,0x6F,0x7D,0xAF,0x47,0xB9,0x73,0x71,0x8C,0x31,0x3F,0xE1,0xC9,0xA9,0x50,0xD6,0xFD,0xBA,0x27,0x57,0xC5,0x6E,0xCD,0xFD,0xFF};
extern const uint8_t spt_GAMES[]             PROGMEM ={0xAA,0x15,0x24,0x2A,0xD6,0xE4,0xB6,0xB6,0x79,0x13,0xB1,0x5C,0xB2,0xF3,0x93,0x97,0xA4,0x66,0x3E,0x75,0x77,0x3E,0xF2,0x52,0x8D,0xCD,0x26,0xF6,0xCC,0x7B,0xDE,0x8A,0x9A,0x14,0x2D,0xBA,0xD2,0xAC,0x66,0xDD,0xEB,0xDE,0x8E,0xB6,0x7A,0x47,0x0D,0xAF,0x95,0x3A,0x6D,0xB1,0x9A,0xDA,0x8E,0xED,0x6C,0x67,0x3A,0x6E,0xA5,0x46,0x42,0xB1,0xED,0x74,0x27,0x3A,0x62,0x32,0xC2,0x23,0x76,0xEA,0x7F,0x22,0x36,0x11,0xF5,0x06,0x38,0x1C,0xC8,0x00,0xDF,0x29,0x39,0xE0,0x7B,0x56,0x03,0x7C,0xCD,0xCA,0x80,0xCC,0x83,0x1E,0x00,0x00};
const uint8_t sp_S[]        PROGMEM = {0x04,0xF8,0xD4,0x5D,0x00,0x8F,0xB9,0x0B,0xE0,0x4B,0x33,0x06,0x7C,0xE6,0xC5,0x80,0xCF,0xD5,0x09,0xF0,0x0D,0x0A,0x02,0xBE,0x12,0x43,0xC0,0x55,0x6C,0xFF,0x39,0x51,0x51,0x15,0x5A};
extern const uint8_t spt_READY_TO_START[]    PROGMEM ={0xAE,0x91,0x85,0xD3,0x32,0xB8,0xB5,0xC6,0x35,0x4E,0x09,0xCA,0x7E,0x6A,0xDF,0xB9,0xCC,0xB4,0xFB,0xA9,0xE2,0xD4,0x30,0xD5,0xEE,0xB7,0x5A,0x55,0xEA,0x5A,0x10,0x99,0xA5,0x55,0x31,0x1B,0x1B,0x4E,0xA6,0x55,0xE5,0xAE,0xCA,0xD2,0x9D,0x5A,0x55,0xA6,0x08,0x49,0x2D,0x8D,0xB5,0x6C,0x11,0xB0,0x54,0x9A,0x06,0x0C,0xB0,0x8C,0x45,0x29,0xBC,0x4A,0x53,0xCB,0x4E,0xA5,0xA9,0xC2,0x4C,0xD5,0xF2,0x1A,0xA0,0x03,0x35,0x05,0xFC,0xA9,0x6C,0x01,0x05,0xFC,0x1D,0x0C,0x10,0x80,0xA6,0xD2,0x4F,0x1E,0x43,0x44,0x86,0xB4,0xBD,0xC5,0xAD,0x4E,0xE5,0x8B,0x77,0x18,0x37,0x59,0x85,0x9F,0xE6,0xA5,0xBA,0x78,0x67,0x33,0x6D,0x91,0x9F,0x22,0x1D,0xE6,0xD0,0x45,0xDA,0x49,0x46,0xB8,0x2C,0x00,0x03,0x64,0x19,0xCA,0x80,0x26,0x9B,0x11,0xE0,0x12,0x33,0x00,0xC0,0x03,0x00,0x00};
extern const uint8_t spt_NEXT[]              PROGMEM ={0xAE,0xF6,0x16,0x3E,0x33,0x25,0x85,0xDA,0x5B,0x78,0x8F,0x34,0x5D,0xEA,0xE0,0x60,0x2C,0x5B,0xF6,0xA9,0x73,0xD6,0x50,0xED,0x3A,0xA7,0xCE,0x55,0x53,0x6C,0xEA,0x9E,0x3A,0x77,0x4D,0x8E,0x49,0x72,0x9A,0xDC,0x35,0xC4,0x37,0xC9,0x6C,0x52,0x53,0x2E,0xA9,0xF2,0x44,0x04,0x30,0xC0,0x91,0x51,0x06,0x78,0x29,0x42,0x03,0x12,0x90,0x00,0x08,0x60,0x04,0x55,0x02,0x9C,0xE0,0x82,0x81,0x07,0x00,0x00};
extern const uint8_t sp4_LEVEL[] PROGMEM = {0x69,0xAB,0xC4,0xB3,0xD8,0x92,0x86,0x2D,0x83,0xEE,0x60,0xCD,0x12,0xD6,0x0C,0x66,0x45,0x2C,0x73,0x58,0x0B,0xA8,0x53,0xD6,0xAC,0x6D,0xE9,0xC0,0x57,0xC5,0xB2,0xAE,0xA1,0xB0,0x49,0x0D,0x7B,0xBD,0x86,0xA2,0x47,0x35,0xE3,0xF5,0xEA,0xB2,0x4B,0x4B,0xCB,0xC7,0xA3,0xCD,0xDE,0x23,0x59,0x1A,0x9A,0x31,0x8B,0xB0,0x54,0x76,0xE3,0xC6,0x26,0x5C,0x2C,0xCC,0x76,0x6B,0x92,0xBC,0x34,0x95,0xC6,0xA3,0xCE,0x74,0xDB,0x85,0x3B,0x8F,0xBA,0x90,0x9C,0x51,0xCC,0xD6,0xEA,0x4C,0x63,0x56,0x30,0x6D,0xA9,0x23,0xCF,0x59,0xD0,0x34,0xB5,0xF9,0x7F};



int Delaytime[7] = {4500, 4000, 3500, 3000, 2500, 2000, 1700};

//-----------------------------------setup---------------------------------
void setup() {
  Serial.begin(9600);
  CircuitPlayground.begin();
  //--------------------------------Interrupts--------------------------------
  attachInterrupt(digitalPinToInterrupt(slideswitchpin), switchISR, CHANGE);
  attachInterrupt(digitalPinToInterrupt(rightbuttonpin), rightbuttonISR, FALLING);
  attachInterrupt(digitalPinToInterrupt(leftbuttonpin), leftbuttonISR, FALLING);
  //attachInterrupt(digitalPinToInterrupt(CPLAY_LIS3DH_INTERRUPT), AccelISR, FALLING);
 
 
 
 //-----------------speaker------------------------
  CircuitPlayground.speaker.say(spt_READY_TO_START);
  CircuitPlayground.setAccelRange(LIS3DH_RANGE_8_G);//acceleromiter
  
  //---------------acceleromiter-------------------
  //CircuitPlayground.setAccelTap(1, TapSensitivity);//adjusts the number of taps needed & sensitivity              
}

















//------------------------------------main--------------------------------------------
void loop() {
Adelaytime.start(Delaytime[difficultylevel], AsyncDelay::MILLIS);
CircuitPlayground.clearPixels();
//Serial.print("current difficulty");
//Serial.println(moistvalue);

delay(100);//debounce like break, mainly helps with the end game 






//----------------------------------gamecode start-up---------------------------------------------
if(!startvar){//the before game difficulty set up loop
  WrongAns = 0;
  
  if(rightbuttonflag){
     delay(20);
     difficultylevel++;
     rightbuttonflag = 0; 
  //--------limit the difficulty level----------
   if(difficultylevel > 6){
      difficultylevel = 6;
    } 
    
    Serial.print("current difficulty: ");
    Serial.println(difficultylevel);
    
    CircuitPlayground.playTone(600,20);
    CircuitPlayground.playTone(500,20);//set first value between 350-450
    CircuitPlayground.playTone(600,20);
  }
  if(leftbuttonflag){
     delay(20);
     difficultylevel--;
     leftbuttonflag = 0;
  //--------limit the difficulty level----------
   if(difficultylevel<0){
        difficultylevel = 0;
      }
    Serial.print("Current difficulty: ");
    Serial.println(difficultylevel);
    
    CircuitPlayground.playTone(550,20);
    CircuitPlayground.playTone(400,20);//set first value between 350-450
    CircuitPlayground.playTone(550,20);
  }


  //the slideswitch code that triggeres the game start loop via interrupt so the interrupt can be reued
  if(Switchflag)
    startvar = 1;//only turn back to false when game over  
    Switchflag = 0;
}









//-----------------------------------gameplay code-----------------------------
if(startvar){
  //random slect the case, then have the case have async delay start, at the end use is 
  //expired to tell when  time is up and add to the WrongAns variable
  //dificulty will set the time in the async delay
  //other wise have a short delay that repeats a spicific number of time untill it adds up to the difficulty time


if(!WrongAns && !RightAns){
  int ModeControl = random(0,3);
 if(ModeControl > 6){
      ModeControl = 0;
    } 



  switch (ModeControl) {//cahnge modecontrol to something else
  case 0: 
  if(!startvar || RightAns || WrongAns){
      break;
    }    
      Adelaytime.restart();
      Serial.println("Current Task: Press the RIGHT Button ");
      CircuitPlayground.speaker.say(sp2_PRESS);
	    CircuitPlayground.speaker.say(sp4_RIGHT);
      CircuitPlayground.speaker.say(sp2_BUTTON);
     while(!Adelaytime.isExpired()){
        if(WrongAns || RightAns){
          break;
        }
        delay(50);
        pressrightbutton();
      }
      if(Adelaytime.isExpired() && !RightAns){
          WrongAns = 1;
          break;
      } else if(Adelaytime.isExpired()){
         break;
      }
    

  case 1:
  if(!startvar || RightAns || WrongAns){
      break;
    }
      Adelaytime.restart();
      Serial.println("Current Task: Press the LEFT Button ");
        CircuitPlayground.speaker.say(sp2_PRESS);
        CircuitPlayground.speaker.say(sp4_LEFT);
        CircuitPlayground.speaker.say(sp2_BUTTON);
      
      while(!Adelaytime.isExpired()){
        if(WrongAns || RightAns){
          break;
        }
        delay(50);
        pressleftbutton();
      }
      if(Adelaytime.isExpired() && !RightAns){
          WrongAns = 1;
          break;
      } else if(Adelaytime.isExpired()){
         break;
      }
  case 2:
    if(!startvar || RightAns || WrongAns){
      break;
    }
      Adelaytime.restart();
      Serial.println("Current Task: touch the moisture sensor ");
        CircuitPlayground.speaker.say(sp4_CONTACT);

    while(!Adelaytime.isExpired()){
        if(WrongAns || RightAns){
          break;
        }
        delay(50);
        moisturetask();
      }
      if(Adelaytime.isExpired() && !RightAns){
          WrongAns = 1;
          break;
      } else if(Adelaytime.isExpired()){
         break;
      }
  
  }
  
}


  }
  //------------------------------------score stuff-----------------------------------
  

  if(RightAns){
    for(int i = 0; i<10; i ++)
    CircuitPlayground.setPixelColor(i,0,200,0);
    

    Serial.print("Correct!  ");
    Score++;
    diffchange++;
    Serial.print(" Current score:");
    Serial.println(Score);
    
    CircuitPlayground.playTone(600,50);
    CircuitPlayground.playTone(450,50);
    CircuitPlayground.playTone(800,50);
    RightAns = 0;
  }
  
  if(WrongAns){
    for(int i = 0; i<10; i ++)
    CircuitPlayground.setPixelColor(i,200,0,0);

    Serial.print("Wrong answer:   ");
    Serial.print(" Score: ");
    Serial.println(Score);
    //----------------speaker------------------
      CircuitPlayground.speaker.say(spt_GAMES);
      CircuitPlayground.speaker.say(sp_S);
      CircuitPlayground.speaker.say(sp3_OVER);
    
    //restart the begining sequence
      startvar = 0;
      Score=0;
    delay(1000);
    Serial.print("The Current difficutly:  ");
    Serial.println(difficultylevel);
    
  } 

  if(diffchange >= 3 && difficultylevel<=6){
    difficultylevel++;
    diffchange = 0;
    CircuitPlayground.speaker.say(spt_NEXT);
    CircuitPlayground.speaker.say(sp4_LEVEL);

  }




}//end main loop


//--------------------------------------the tasks' loops--------------------------------------
void pressrightbutton(){//put into a switch case so it keep replaying until the time is expired, then set WrongAns = 1;
   moistvalue = CircuitPlayground.readCap(6);
   Serial.println(moistvalue);
   delay(10);
  if(rightbuttonflag){
    RightAns = 1;
    delay(50);
    rightbuttonflag = 0;
  }else if(leftbuttonflag){
    WrongAns = 1;
    delay(50);
    leftbuttonflag = 0;
  } else if(moistvalue>700){
      WrongAns = 1;
     delay(50);
    }
}

void pressleftbutton(){//put into a switch case so it keep replaying until the time is expired, then set WrongAns = 1;
     moistvalue = CircuitPlayground.readCap(6);
    delay(10);
  if(leftbuttonflag){
    RightAns = 1;
    delay(50);
    leftbuttonflag = 0;
  }else if(rightbuttonflag){
      WrongAns = 1;
      delay(50);
    rightbuttonflag = 0;
  } else if(moistvalue>700){
      WrongAns = 1;
     delay(50);
    }
}

void moisturetask(){
   delay(10);
   moistvalue = CircuitPlayground.readCap(6);
   if(moistvalue>700){
    RightAns = 1;
    delay(50);
  }else if(rightbuttonflag){
    WrongAns = 1;
    delay(50);
    rightbuttonflag = 0;
  } else if(leftbuttonflag){
    WrongAns = 1;
    delay(50);
    leftbuttonflag = 0;
  }
}

//----------------------------------------ISR LOOP----------------------------------------
void switchISR(){
  Switchflag = 1;
}

void rightbuttonISR(){
  rightbuttonflag = 1;
}

void leftbuttonISR(){
  leftbuttonflag = 1;
}

/*
void AccelISR(){
  accelflag = 1;
}
*/
